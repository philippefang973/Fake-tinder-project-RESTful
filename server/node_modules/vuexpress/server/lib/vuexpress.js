import fs from 'fs'
import path from 'path'
import express from 'express'
import cookieParser from 'cookie-parser'
import bodyParser from 'body-parser'
import { Route, RouteSet } from './router'

let proto = {}

proto._init = function() {
  this.app = express()

  this.app.set('view engine', 'pug')
  this.app.set('port', 3000)

  this.middlewares = []
}

proto.set = function(key, value) {
  this.app.set(key, value)
}

proto.use = function(...args) {
  this.middlewares.push(args)
}

proto.static = function (root) {
  this.use('/static', express.static(root))
}

proto.router = function (routes, middlewares = []) {
  let router = new express.Router
  let routeSet = new RouteSet()
  routes.forEach(route => {
    route = new Route(route)
    route.depend(routeSet)
    route.route(router)
    route.middleware(middlewares)
  })
  this.use(router)
}

proto.on = function(event, handler) {
  this.app.on(event, handler)
}

proto.start = function() {
  let app = this.app

  app.use('/favicon.ico', (req, res) => { res.end() })

  app.use(bodyParser.json())
  app.use(bodyParser.urlencoded({ extended: false }))
  app.use(cookieParser())

  if (app.get('webpack')) {
    const webpack = require('webpack')
    const webpackMiddleware = require('webpack-dev-middleware')
    const webpackHotMiddleware = require('webpack-hot-middleware')
    let compiler = webpack(app.get('webpack'))
    app.use(webpackMiddleware(compiler, {
      stats: {
        colors: true,
        chunks: false
      }
    }))
    app.use(webpackHotMiddleware(compiler))

    app.use((req, res, next) => {
      if (req.headers.accept && req.headers.accept.indexOf('text/html') > -1) {
        process.stdout.write('\x1Bc')
      }
      next()
    })
  }

  this.middlewares.forEach(args => {
    app.use(...args)
  })

  app.use((req, res, next) => {
    let err = new Error('Not Found')
    err.status = 404
    next(err)
  })

  app.use((error, req, res, next) => {
    error.status = error.status || 500
    res.status(error.status).render('error', { error })
  })

  app.listen(app.get('port'), err => {
    if (err) {
      app.emit('error', err)
    }
    else {
      app.emit('listening')
    }
  })
}

function Vuexpress() {
  this._init()
}

Vuexpress.prototype = proto

Vuexpress.prototype.contructor = Vuexpress

export default Vuexpress
