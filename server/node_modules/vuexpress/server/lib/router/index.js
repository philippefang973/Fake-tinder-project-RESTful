import util from 'util'
import express from 'express'
import multer from 'multer'
import pathToRegexp from 'path-to-regexp'
import * as defaultMiddlewares from './middlewares'

const upload = multer()

function runQueue(queue, iterator, done) {
  let index = -1
  let next = (err) => {
    if (err) {
      done(err)
      return
    }
    index++
    if (index < queue.length) {
      iterator(queue[index], next)
    }
    else {
      done()
    }
  }
  next()
}

class RouteSet {
  constructor() {
    this.list = []
    this.options = []
  }

  add(route) {
    this.list.push(route)
    this.options.push(route.options)
  }
}


class Route {
  constructor(options) {
    options = Object.assign({
      path: null,
      method: 'all',
      transport: function(req, res, next) {
        next()
      },
      formdata: false,
    }, options)

    if (!options.path) {
      throw new Error(`A route path is required: ${util.inspect(options)}`)
    }

    options.path = pathToRegexp(options.path)
    options.method = options.method.toLowerCase()

    this.options = options
    this.middlewares = []
    this.set = null
  }

  depend(set) {
    this.set = set
    this.set.add(this)
  }

  middleware(middlewares) {
    middlewares.forEach(middleware => {
      if (typeof middleware === 'string') {
        if (defaultMiddlewares[middleware]) {
          middleware = defaultMiddlewares[middleware]
        }
        else {
          throw new Error(`unexist middleware: ${middleware}`)
        }
      }
      this.middlewares.push(middleware(this.options, this.set.options))
    })
  }

  route(router) {
    if (this.options.formdata) {
      router[this.options.method](this.options.path, upload.any(), this.callback.bind(this))
    }
    else {
      router[this.options.method](this.options.path, this.callback.bind(this))
    }
  }

  callback(req, res, next) {
    let context = {}
    runQueue(this.middlewares, (middleware, next) => {
      middleware.call(context, req, res, next)
    }, err => {
      if (err) {
        next(err)
      }
      else {
        this.options.transport.call(context, req, res, next)
      }
    })
  }
}

export { Route, RouteSet }
