import Vue from 'vue'
import VueRouter from 'vue-router'
import App from '../lib/components/app.vue'

describe('app component', () => {

  Vue.use(VueRouter)

  const router = new VueRouter({
    routes: [
      {
        path: '/home'
      },
      {
        path: '/products'
      },
      {
        path: '/user'
      }
    ]
  })

  const createApp = (props) => {
    const app = new Vue({
      router,
      render: h => h(App, { props })
    })
    app.$mount()
    return app
  }

  it('don\'t render dock default', () => {
    const app = createApp()
    expect(app.$el.querySelector('.dock')).toBe(null)
    expect(app.$el.querySelector('.dock-item')).toBe(null)
  })

  it('render dock when set', () => {
    const app = createApp({
      dock: [{
        label: 'home',
        icon: 'house',
        path: '/home'
      }]
    })
    expect(app.$el.querySelector('.dock')).not.toBe(null)
    expect(app.$el.querySelectorAll('.dock-item').length).toBe(1)
    expect(app.$el.querySelector('.dock-item .dock-item-icon-house')).not.toBe(null)
    expect(app.$el.querySelector('.dock-item').textContent.trim()).toBe('home')
  })

  it('dock item is selected when route matched', (done) => {
    const app = createApp({
      dock: [
        {
          label: 'home',
          path: '/home'
        },
        {
          label: 'user',
          path: '/user'
        }
      ]
    })
    router.push('/home')
    app.$nextTick(() => {
      expect(app.$el.querySelector('.dock').style.display).not.toBe('none')
      expect(app.$el.querySelectorAll('.dock-item-active').length).toBe(1)
      expect(app.$el.querySelector('.dock-item-active').textContent.trim()).toBe('home')
      done()
    })
  })

  it('dock is hidden when no route matched', (done) => {
    const app = createApp({
      dock: [
        {
          label: 'home',
          path: '/home'
        },
        {
          label: 'user',
          path: '/user'
        }
      ]
    })
    router.push('/products')
    setTimeout(() => {
      expect(app.$el.querySelector('.dock').style.display).toBe('none')
      done()
    }, 1000)
  })

})
