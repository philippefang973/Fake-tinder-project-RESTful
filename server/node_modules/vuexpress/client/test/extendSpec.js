import extend from '../lib/utils/extend'

describe('util extend', () => {

  it('return first argument', () => {
    let obj = {
      foo: 'foo',
      bar: 'bar'
    }
    let res = extend(obj)
    expect(res).toBe(obj)
  })

  it('self copy with empty object',  () => {
    let obj = {
      foo: 'foo',
      bar: 'bar'
    }
    let res = extend({}, obj)
    expect(res).not.toBe(obj)
    expect(res).toEqual(obj)
  })

  it('undefined willnot be copied',  () => {
    let obj = {
      foo: 'foo',
      bar: 'bar',
      barz: null,
      qux: undefined
    }
    let res = extend({}, obj)
    expect(res).toEqual({
      foo: 'foo',
      bar: 'bar',
      barz: null
    })
  })

  it('deep copy', () => {
    let obj = {
      foo: 'foo',
      bar: {
        barz: 'barz',
        qux: 'qux'
      }
    }
    let res = extend({}, obj)
    expect(res).toEqual(obj)
    expect(res.bar).toEqual(obj.bar)
    expect(res.bar).not.toBe(obj.bar)
  })

  it('overide exit property', () => {
    let from = {
      foo: 'foo',
      bar: {
        barz: 'barz',
        qux: 'qux'
      }
    }
    let to = {
      foo: 'foo',
      bar: 'bar',
      barz: 'barz'
    }
    let res = extend(to, from)
    expect(res).toEqual({
      foo: 'foo',
      bar: {
        barz: 'barz',
        qux: 'qux'
      },
      barz: 'barz'
    })
  })

  it('mutiple copy', () => {
    let obj1 = {
      foo: 'foo'
    }
    let obj2 = {
      bar: 'bar'
    }
    let obj3 = {
      barz: 'barz'
    }
    let res = extend({}, obj1, obj2, obj3)
    expect(res).toEqual({
      foo: 'foo',
      bar: 'bar',
      barz: 'barz'
    })
  })

})
