import Vue from 'vue'
import Vuex from 'vuex'
import promise from 'es6-promise'
import extend from '../utils/extend'

promise.polyfill()

Vue.use(Vuex)

const MODULE_DEFAULT = {

  namespaced: true,

  mutations: {
    update(state, props) {
      for (let key in props) {
        if (state.hasOwnProperty(key)) {
          state[key] = props[key]
        }
      }
    }
  },

  actions: {
    update({ commit }, props) {
      commit('update', props)
    }
  }

}

export default function createStore(modules) {
  (function mixin(modules) {
    Object.keys(modules).forEach(name => {
      const context = Object.create(null)
      let module = modules[name]
      module = extend({}, MODULE_DEFAULT, module)
      Object.keys(module.actions).forEach(function (key) {
        const originAction = module.actions[key]
        module.actions[key] = (...args) => {
          return originAction.apply(context, args)
        }
      })
      modules[name] = module
      if (module.modules) {
        mixin(module.modules)
      }
    })
  })(modules)

  return new Vuex.Store({
    strict: process.env.NODE_ENV !== 'production',
    modules
  })
}
